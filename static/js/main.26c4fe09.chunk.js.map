{"version":3,"sources":["SearchCity.js","App.js","serviceWorker.js","index.js"],"names":["SearchCity","useState","query","setQuery","weatherResponse","setWeatherResponse","searchCity","e","a","preventDefault","url","fetch","res","json","data","console","log","error","className","onSubmit","htmlFor","type","value","name","onChange","target","map","i","key","datetime","max_temp","min_temp","weather","description","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"sSAEe,SAASA,IAAa,IAAD,EAERC,mBAAS,IAFD,mBAE1BC,EAF0B,KAEpBC,EAFoB,OAGYF,mBAAS,IAHrB,mBAG1BG,EAH0B,KAGVC,EAHU,KAK1BC,EAAU,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACfD,EAAEE,iBACa,mCACTC,EAHS,6DAGmDR,EAHnD,gBAEA,oCAFA,kBAKOS,MAAMD,GALb,cAKLE,EALK,gBAMQA,EAAIC,OANZ,OAMLC,EANK,OAOXC,QAAQC,IAAIF,EAAKA,MACjBT,EAAmBS,EAAKA,MARb,kDAWXC,QAAQE,MAAR,MAXW,0DAAH,sDAgBhB,OACI,oCACI,0BAAMC,UAAU,OAAOC,SAAUb,GAC7B,2BAAOY,UAAU,YAAYE,QAAQ,SAArC,gBACA,2BAAOC,KAAK,OAAOC,MAAOpB,EAAOqB,KAAK,QAAQC,SAAU,SAACjB,GAAD,OAAKJ,EAASI,EAAEkB,OAAOH,UAC/E,4BAAQJ,UAAU,YAAYG,KAAK,UAAnC,WAECjB,EAAgBsB,KAAI,SAACd,EAAIe,GAAL,OACrB,yBAAKT,UAAU,WAAWU,IAAKD,GAC3B,2BAAG,gCAASf,EAAIiB,WAChB,+CAAqBjB,EAAIkB,UACzB,+CAAqBlB,EAAImB,UACzB,2BAAInB,EAAIoB,QAAQC,kB,ICpBrBC,E,uKATX,OACE,yBAAKhB,UAAU,aACb,gDACA,kBAAClB,EAAD,W,GALUmC,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLF,QAAQE,MAAMA,EAAMqC,c","file":"static/js/main.26c4fe09.chunk.js","sourcesContent":["import React,{useState} from 'react';\n\nexport default function SearchCity(){\n\n    const[query,setQuery] = useState('');\n    const[weatherResponse,setWeatherResponse] = useState([]);\n    \n    const searchCity = async (e) =>{\n        e.preventDefault();\n        const api_key =\"b56ea99769a745fb8e64bd39ca71114d\";\n        const url = `https://api.weatherbit.io/v2.0/forecast/daily?city=${query}&key=${api_key}`;\n        try{\n            const res = await fetch(url);\n            const data = await res.json();\n            console.log(data.data);\n            setWeatherResponse(data.data);\n        }\n        catch(error){\n            console.error(error);\n        }\n        \n    }\n\n    return(\n        <>\n            <form className=\"form\" onSubmit={searchCity}>\n                <label className=\"cityTitle\" htmlFor=\"query\">City Name : </label>\n                <input type=\"text\" value={query} name=\"query\" onChange={(e)=>setQuery(e.target.value)} />\n                <button className=\"btnSearch\" type=\"submit\">Search</button>\n            </form>  \n                {weatherResponse.map((res,i)=>(\n                <div className=\"cardList\" key={i}>\n                    <p><strong>{res.datetime}</strong></p>\n                    <p>Max temperature: {res.max_temp}</p>\n                    <p>Min temperature: {res.min_temp}</p>\n                    <p>{res.weather.description}</p>\n                </div>\n                )\n                 )}\n        </>\n    )\n}","import React from 'react';\nimport './App.css';\nimport SearchCity from './SearchCity';\n\nclass App extends React.Component {\n  render(){\n    return (\n      <div className=\"container\">\n        <h1>Weather Forecast</h1>\n        <SearchCity/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}